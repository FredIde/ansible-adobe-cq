#!/usr/bin/python

import sys
import os
import platform
import httplib
import urllib
import base64
import json
import string
import random


# --------------------------------------------------------------------------------
# CQPassword class.
# --------------------------------------------------------------------------------
class CQPassword(object):
    def __init__(self, module):
        self.module         = module
        self.id             = self.module.params['id']
        self.new_password   = self.module.params['new_password']
        self.old_password   = self.module.params['old_password']
        self.ignore_err     = self.module.params['ignore_err']
        self.admin_user     = self.module.params['admin_user']
        self.admin_password = self.module.params['admin_password']
        self.host           = self.module.params['host']
        self.port           = self.module.params['port']
        
        self.changed = False
        self.msg = []
        self.id_initial = self.id[0]

        self.get_user_info()

    # --------------------------------------------------------------------------------
    # Look up user info.
    # --------------------------------------------------------------------------------

    def get_user_info(self):
        (status, output) = self.http_request('GET', '/home/users/%s/%s.rw.json?props=*' % (self.id_initial, self.id))
        if status == 200:
            self.exists = True
        elif status == 401 and self.ignore_err:
            self.exit_status()
        else:
            self.module.fail_json(msg="unable to find user ID '%s': %s - %s" % (self.id, status, output))

    # --------------------------------------------------------------------------------
    # Set new password
    # --------------------------------------------------------------------------------
    def set_password(self):
        fields = [
            (':currentPassword', self.old_password),
            ('rep:password', self.new_password),
            ]
            
        if not self.module.check_mode:
            (status, output) = self.http_request('POST', '/home/users/a/admin.rw.html', fields)
            if status != 200:
                self.module.fail_json(msg='failed to change password: %s - %s' % (status, output))
        self.changed = True
        self.msg.append('password changed')

    # --------------------------------------------------------------------------------
    # Issue http request.
    # --------------------------------------------------------------------------------
    def http_request(self, method, url, fields = None):
        headers = {'Authorization' : 'Basic ' + base64.b64encode(self.admin_user + ':' + self.admin_password)}
        if fields:
            data = urllib.urlencode(fields)
            headers['Content-type'] = 'application/x-www-form-urlencoded'
        else:
            data = None
        conn = httplib.HTTPConnection(self.host + ':' + self.port)
        try:
            conn.request(method, url, data, headers)
        except Exception as e:
            self.module.fail_json(msg="http request '%s %s' failed: %s" % (method, url, e))
        resp = conn.getresponse()
        output = resp.read()
        return (resp.status, output)

    # --------------------------------------------------------------------------------
    # Return status and msg to Ansible.
    # --------------------------------------------------------------------------------
    def exit_status(self):
        if self.changed:
            msg = ','.join(self.msg)
            self.module.exit_json(changed=True, msg=msg)
        else:
            self.module.exit_json(changed=False)


# --------------------------------------------------------------------------------
# Mainline.
# --------------------------------------------------------------------------------
def main():
    module = AnsibleModule(
        argument_spec      = dict(
            id             = dict(required=True),
            new_password   = dict(default=None),
            old_password   = dict(default=None),
            admin_user     = dict(required=True),
            admin_password = dict(required=True),
            host           = dict(required=True),
            port           = dict(required=True),
            ignore_err     = dict(default=False),
            ),
        supports_check_mode=True
        )

    password = CQPassword(module)
    
    password.set_password()

    password.exit_status()

# --------------------------------------------------------------------------------
# Ansible boiler plate code.
# --------------------------------------------------------------------------------
from ansible.module_utils.basic import *
main()
