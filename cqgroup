#!/usr/bin/python

import sys
import os
import platform
import httplib
import urllib
import base64
import json


# --------------------------------------------------------------------------------
# CQGroup class.
# --------------------------------------------------------------------------------
class CQGroup(object):
    def __init__(self, module):
        self.module         = module
        self.state          = self.module.params['state']
        self.id             = self.module.params['id']
        self.name           = self.module.params['name']
        self.groups         = self.module.params['groups']
        self.admin_user     = self.module.params['admin_user']
        self.admin_password = self.module.params['admin_password']
        self.host           = self.module.params['host']
        self.port           = self.module.params['port']
        
        self.changed = False
        self.msg = []
        self.id_initial = self.id[0]

        self.get_group_info()

    # --------------------------------------------------------------------------------
    # Look up package info.
    # --------------------------------------------------------------------------------
    def get_group_info(self):
        (status, output) = self.http_request('GET', '/home/groups/%s/%s.rw.json?props=*' % (self.id_initial, self.id))
        if status == 200:
            self.exists = True
            info = json.loads(output)
            self.curr_name = info['name']
            self.curr_groups = []
            for entry in info['declaredMemberOf']:
                self.curr_groups.append(entry['authorizableId'])
        else:
            self.exists = False

    # --------------------------------------------------------------------------------
    # state='present'
    # --------------------------------------------------------------------------------
    def present(self):
	if self.exists:
            # Update existing group
            if self.name:
                if self.curr_name != self.name:
                    self.update_name()

            if self.groups:
                self.curr_groups.sort()
                self.groups.sort()
                curr_groups = ','.join(self.curr_groups)
                groups = ','.join(self.groups)
                if curr_groups != groups:
                    self.update_groups()
        else:
            # Create new group
            if not self.name:
                self.module.fail_json(msg='Missing required argument: name')
	    self.create_group()

    # --------------------------------------------------------------------------------
    # state='absent'
    # --------------------------------------------------------------------------------
    def absent(self):
        if self.exists:
	    self.delete_group()

    # --------------------------------------------------------------------------------
    # Create a new group
    # --------------------------------------------------------------------------------
    def create_group(self):
        fields = [
            ('createGroup', ''),
            ('authorizableId', self.id),
            ('profile/givenName', self.name),
            ]
        if not self.module.check_mode:
            if self.groups:
                for group in self.groups:
                    fields.append(('membership', group))
            (status, output) = self.http_request('POST', '/libs/granite/security/post/authorizables', fields)
            self.get_group_info()
            if status != 201 or not self.exists:
                self.module.fail_json(msg='failed to create group: %s - %s' % (status, output))
        self.changed = True
        self.msg.append('group created')
    
    # --------------------------------------------------------------------------------
    # Update name
    # --------------------------------------------------------------------------------
    def update_name(self):
        fields = [('profile/givenName', self.name)]
        if not self.module.check_mode:
            (status, output) = self.http_request('POST', '/home/groups/%s/%s.rw.html' % (self.id_initial, self.id), fields)
            if status != 200:
                self.module.fail_json(msg='failed to update name: %s - %s' % (status, output))
        self.changed = True
        self.msg.append('name updated')

    # --------------------------------------------------------------------------------
    # Update groups
    # --------------------------------------------------------------------------------
    def update_groups(self):
        fields = []
        if not self.module.check_mode:
            for group in self.groups:
                fields.append(('membership', group))
            (status, output) = self.http_request('POST', '/home/groups/%s/%s.rw.html' % (self.id_initial, self.id), fields)
            if status != 200:
                self.module.fail_json(msg='failed to update groups: %s - %s' % (status, output))
        self.changed = True
        self.msg.append('groups updated')

    # --------------------------------------------------------------------------------
    # Delete a group
    # --------------------------------------------------------------------------------
    def delete_group(self):
        fields = [('deleteAuthorizable', '')]
        if not self.module.check_mode:
            (status, output) = self.http_request('POST', '/home/groups/%s/%s.rw.html' % (self.id_initial, self.id), fields)
            if status != 200:
                self.module.fail_json(msg='failed to delete group: %s - %s' % (status, output))
        self.changed = True
        self.msg.append('group deleted')

    # --------------------------------------------------------------------------------
    # Issue http request.
    # --------------------------------------------------------------------------------
    def http_request(self, method, url, fields = None):
        headers = {'Authorization' : 'Basic ' + base64.b64encode(self.admin_user + ':' + self.admin_password)}
        if fields:
            data = urllib.urlencode(fields)
            headers['Content-type'] = 'application/x-www-form-urlencoded'
        else:
            data = None
	conn = httplib.HTTPConnection(self.host + ':' + self.port)
	try:
	    conn.request(method, url, data, headers)
        except Exception as e:
	    self.module.fail_json(msg="http request '%s %s' failed: %s" % (method, url, e))
	resp = conn.getresponse()
        output = resp.read()
	return (resp.status, output)

    # --------------------------------------------------------------------------------
    # Return status and msg to Ansible.
    # --------------------------------------------------------------------------------
    def exit_status(self):
        if self.changed:
            msg = ','.join(self.msg)
            self.module.exit_json(changed=True, msg=msg)
        else:
            self.module.exit_json(changed=False)


# --------------------------------------------------------------------------------
# Mainline.
# --------------------------------------------------------------------------------
def main():
    module = AnsibleModule(
        argument_spec      = dict(
            id             = dict(required=True),
            state          = dict(required=True, choices=['present', 'absent']),
            name           = dict(default=None),
            groups         = dict(default=None, type='list'),
            admin_user     = dict(required=True),
            admin_password = dict(required=True),
            host           = dict(required=True),
            port           = dict(required=True),
            ),
        supports_check_mode=True
        )

    group = CQGroup(module)
    
    state = module.params['state']

    if state == 'present':
        group.present()
    elif state == 'absent':
        group.absent()
    else:
        module.fail_json(msg='Invalid state: %s' % state)

    group.exit_status()

# --------------------------------------------------------------------------------
# Ansible boiler plate code.
# --------------------------------------------------------------------------------
from ansible.module_utils.basic import *
main()
